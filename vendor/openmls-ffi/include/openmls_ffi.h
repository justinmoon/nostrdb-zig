// Generated by cbindgen. Do not edit manually.


#ifndef OPENMLS_FFI_H
#define OPENMLS_FFI_H

#pragma once

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum OpenmlsProcessedMessageType {
  Application = 0,
  Proposal = 1,
  Commit = 2,
  ExternalJoinProposal = 3,
  Other = 255,
} OpenmlsProcessedMessageType;

typedef int openmls_status_t;

typedef struct OpenmlsFfiBuffer {
  uint8_t *data;
  uintptr_t len;
} OpenmlsFfiBuffer;

typedef struct OpenmlsExtensionInput {
  uint16_t extension_type;
  struct OpenmlsFfiBuffer data;
} OpenmlsExtensionInput;

#define OPENMLS_STATUS_OK 0

#define OPENMLS_STATUS_ERROR 1

#define OPENMLS_STATUS_NULL_POINTER 2

#define OPENMLS_STATUS_INVALID_ARGUMENT 3

/**
 * Returns a pointer to a static, null-terminated string describing the FFI layer version.
 * Caller must not free the returned pointer.
 */
const char *openmls_ffi_version(void);

/**
 * Simple smoketest that instantiates the default crypto provider and returns OK.
 */
openmls_status_t openmls_ffi_smoketest(void);

/**
 * Creates a new provider backed by RustCrypto and in-memory storage.
 *
 * The caller takes ownership of the returned pointer and must release it with
 * [`openmls_ffi_provider_free`].
 */
void *openmls_ffi_provider_new_default(void);

/**
 * Releases a provider created by [`openmls_ffi_provider_new_default`].
 */
void openmls_ffi_provider_free(void *provider);

/**
 * Releases memory owned by the FFI layer.
 */
void openmls_ffi_buffer_free(struct OpenmlsFfiBuffer buffer);

/**
 * Builds a key package for publishing to relays.
 */
openmls_status_t openmls_ffi_key_package_create(void *provider,
                                                const char *identity_hex,
                                                uint16_t ciphersuite_value,
                                                const uint16_t *extension_types,
                                                uintptr_t extension_len,
                                                bool mark_as_last_resort,
                                                struct OpenmlsFfiBuffer *out_key_package);

openmls_status_t openmls_ffi_group_create(void *provider,
                                          const char *creator_identity_hex,
                                          uint16_t ciphersuite_value,
                                          const uint16_t *required_extension_types,
                                          uintptr_t required_extension_len,
                                          const struct OpenmlsExtensionInput *additional_extensions,
                                          uintptr_t additional_extensions_len,
                                          const struct OpenmlsFfiBuffer *key_packages,
                                          uintptr_t key_package_len,
                                          bool use_ratchet_tree_extension,
                                          struct OpenmlsFfiBuffer *out_group_id,
                                          struct OpenmlsFfiBuffer *out_commit_message,
                                          struct OpenmlsFfiBuffer *out_welcome_message,
                                          struct OpenmlsFfiBuffer *out_group_info);

openmls_status_t openmls_ffi_welcome_parse(void *provider,
                                           const struct OpenmlsFfiBuffer *welcome_message,
                                           const struct OpenmlsFfiBuffer *ratchet_tree,
                                           bool use_ratchet_tree_extension,
                                           void **out_staged_welcome,
                                           struct OpenmlsFfiBuffer *out_group_context);

openmls_status_t openmls_ffi_welcome_join(void *provider,
                                          void *staged_welcome,
                                          struct OpenmlsFfiBuffer *out_group_id);

void openmls_ffi_welcome_free(void *staged_welcome);

openmls_status_t openmls_ffi_message_encrypt(void *provider,
                                             const struct OpenmlsFfiBuffer *group_id,
                                             const struct OpenmlsFfiBuffer *plaintext,
                                             struct OpenmlsFfiBuffer *out_ciphertext);

openmls_status_t openmls_ffi_message_decrypt(void *provider,
                                             const struct OpenmlsFfiBuffer *group_id,
                                             const struct OpenmlsFfiBuffer *ciphertext,
                                             struct OpenmlsFfiBuffer *out_plaintext,
                                             enum OpenmlsProcessedMessageType *out_message_type);

#endif /* OPENMLS_FFI_H */
